from odoo import models, api, fields, _, tools
from odoo.exceptions import UserError, ValidationError


class InheritProductTemplate(models.Model):
    _inherit = 'product.template'

    customer_tags = fields.Many2many('customer.tags',string='Customer Tags')
    property_stock_production = fields.Many2one(
        'stock.location', "Production Location",
        company_dependent=True, check_company=True,
        domain="[]",
        help="This stock location will be used, instead of the default one, as the source location for stock moves generated by manufacturing orders.")
    l10n_in_hsn_code = fields.Char(string="HSN/SAC Code",
                                   help="Harmonized System Nomenclature/Services Accounting Code",
                                   compute='compute_hsn')
    l10n_in_hsn_description = fields.Char(string="HSN/SAC Description",
                                          help="HSN/SAC description is required if HSN/SAC code is not provided.")
    categ_id = fields.Many2one(
        'product.category', 'Product Category',
        change_default=True, group_expand='_read_group_categ_id',
        required=True)
    # header fields
    material_code = fields.Char(string='Material Code', tracking=True)
    model_number = fields.Char(string='Model Number', tracking=True)
    # customer_tags = fields.Many2many()
    remarks = fields.Char(string='Remarks', tracking=True)
    is_fg = fields.Boolean(string='Is FG',default=False, tracking=True)
    is_resultant_goods = fields.Boolean(string='Is Resultant Goods (MOOWR)', tracking=True)
    product_category_name = fields.Char(related='categ_id.category_name', store=True)
    product_category_description = fields.Char(string='Product Category Description', tracking=True,
                                               related='categ_id.category_description')
    # india_hsn = fields.Char(string='Indian HSN', tracking=True)

    # non tariff barriers(tab)
    bis = fields.Boolean(string='BIS', related='categ_id.bis', tracking=True)
    wpc = fields.Boolean(string='WPC', related='categ_id.wpc', tracking=True)
    aerb = fields.Boolean(string='AERB', related='categ_id.aerb', tracking=True)
    fssai = fields.Boolean(string='FSSAI', related='categ_id.fssai', tracking=True)
    cdsco = fields.Boolean(string='CDSCO', related='categ_id.cdsco', tracking=True)
    pq = fields.Boolean(string='P&Q', related='categ_id.pq', tracking=True)
    apeda = fields.Boolean(string='APEDA', related='categ_id.apeda', tracking=True)
    medical_device = fields.Boolean(string='Medical Device', related='categ_id.medical_device', tracking=True)
    pims_applicable = fields.Boolean(string='PIMS applicable', related='categ_id.pims_applicable', tracking=True)
    chims_applicable = fields.Boolean(string='CHIMS applicable', related='categ_id.chims_applicable', tracking=True)
    sims_applicable = fields.Boolean(string='SIMS applicable', related='categ_id.sims_applicable', tracking=True)

    bis_remark = fields.Char(tracking=True, related='categ_id.bis_remark')
    wpc_remark = fields.Char(tracking=True, related='categ_id.wpc_remark')
    aerb_remark = fields.Char(tracking=True, related='categ_id.aerb_remark')
    fssai_remark = fields.Char(tracking=True, related='categ_id.fssai_remark')
    cdsco_remark = fields.Char(tracking=True, related='categ_id.cdsco_remark')
    pq_remark = fields.Char(tracking=True, related='categ_id.pq_remark')
    apeda_remark = fields.Char(tracking=True, related='categ_id.apeda_remark')
    medical_device_remark = fields.Char(tracking=True, related='categ_id.medical_device_remark')
    pims_applicable_remark = fields.Char(tracking=True, related='categ_id.pims_applicable_remark')
    chims_applicable_remark = fields.Char(tracking=True, related='categ_id.chims_applicable_remark')
    sims_applicable_remark = fields.Char(tracking=True, related='categ_id.sims_applicable_remark')

    #     CCR from ICEGATE (Part of Non Tariff Barriers tab)

    ccr_remark = fields.Char(string='Remark', tracking=True, related='categ_id.ccr_remark')
    ccr_date = fields.Date(string='Date', tracking=True, related='categ_id.ccr_date')
    ccr_link = fields.Char(string='CCR link', tracking=True, related='categ_id.ccr_link')

    #     Attachments tab - Product level

    product_images = fields.Binary(string='Product Images', tracking=True)
    catalog = fields.Binary(string='Catalog', tracking=True)
    other = fields.Binary(string='Other', tracking=True)

    #  Notification Tab
    basic_customs_no = fields.Many2one('notification.master', tracking=True, related='categ_id.basic_customs_no')
    basic_customs_sr_no = fields.Many2one('notification.serial.master', tracking=True,
                                          related='categ_id.basic_customs_sr_no')
    basic_customs_remark = fields.Char(related='basic_customs_no.notification_remarks', tracking=True)
    basic_customs_sr_remark = fields.Char(related='basic_customs_sr_no.notification_serial_remarks', tracking=True)

    social_welfare_no = fields.Many2one('notification.master', tracking=True, related='categ_id.social_welfare_no')
    social_welfare_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.social_welfare_sr_no')
    social_welfare_remark = fields.Char(related='social_welfare_no.notification_remarks', tracking=True)
    social_welfare_sr_remark = fields.Char(related='social_welfare_sr_no.notification_serial_remarks', tracking=True)

    health_cess_no = fields.Many2one('notification.master', tracking=True, related='categ_id.health_cess_no')
    health_cess_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.health_cess_sr_no')
    health_cess_remark = fields.Char(related='health_cess_no.notification_remarks')
    health_cess_sr_remark = fields.Char(related='health_cess_sr_no.notification_serial_remarks')

    aidc_no = fields.Many2one('notification.master', tracking=True, related='categ_id.aidc_no')
    aidc_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.aidc_sr_no')
    aidc_remark = fields.Char(related='aidc_no.notification_remarks')
    aidc_sr_remark = fields.Char(related='aidc_sr_no.notification_serial_remarks')

    excise_no = fields.Many2one('notification.master', tracking=True, related='categ_id.excise_no')
    excise_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.excise_sr_no')
    excise_remark = fields.Char(related='excise_no.notification_remarks')
    excise_sr_remark = fields.Char(related='excise_sr_no.notification_serial_remarks')

    road_infra_no = fields.Many2one('notification.master', tracking=True, related='categ_id.road_infra_no')
    road_infra_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.road_infra_sr_no')
    road_infra_remark = fields.Char(related='road_infra_no.notification_remarks')
    road_infra_sr_remark = fields.Char(related='road_infra_sr_no.notification_serial_remarks')

    compensation_no = fields.Many2one('notification.master', tracking=True, related='categ_id.compensation_no')
    compensation_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.compensation_sr_no')
    compensation_remark = fields.Char(related='compensation_no.notification_remarks')
    compensation_sr_remark = fields.Char(related='compensation_sr_no.notification_serial_remarks')

    igst_no = fields.Many2one('notification.master', tracking=True, related='categ_id.igst_no')
    igst_sr_no = fields.Many2one('notification.serial.master', tracking=True, related='categ_id.igst_sr_no')
    igst_remark = fields.Char(related='igst_no.notification_remarks')
    igst_sr_remark = fields.Char(related='igst_sr_no.notification_serial_remarks')

    tracking = fields.Selection([
        ('serial', 'By Unique Serial Number'),
        ('lot', 'By Lots'),
        ('none', 'No Tracking')], default='lot')

    @api.constrains('material_code')
    def unique_material_code(self):
        if self.material_code == False:
            raise ValidationError(_('Please Fill Material Code first'))
        search_material_code = self.env['product.template'].search([('material_code', '=', self.material_code),('id', '!=', self.id)])
        if search_material_code:
            raise ValidationError(_('Material Code Already Exist'))


    @api.depends('categ_id')
    def compute_hsn(self):
        for rec in self:
            rec.l10n_in_hsn_code = rec.categ_id.indian_hsn.hsn_number

    # Function to fetch hsn description from hsn master(Deepak)
    @api.onchange('l10n_in_hsn_code')
    def fetch_hsn_description_from_hsn_master(self):
        if self.l10n_in_hsn_code:
            record = self.env['hsn.master'].search([('hsn_number', '=', self.l10n_in_hsn_code)])
            if record:
                self.l10n_in_hsn_description = record.hsn_remarks

    # @api.model
    # def create(self, vals):
    #     res = super(InheritProductTemplate, self).create(vals)
    #     for rec in vals:
    #         res.tracking = rec['lot']
    #     return res



class CustomerTags(models.Model):
    _name = 'customer.tags'
    _rec_name = 'name'

    name = fields.Char('Name')
    color = fields.Integer(string='Color')
